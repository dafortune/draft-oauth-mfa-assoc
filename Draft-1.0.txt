



Network Working Group                                          J. Hanson
Internet-Draft                                                Auth0 Inc.
Expires: January 15, 2018                                  July 14, 2017


            OAuth 2.0 Multi-Factor Authenticator Association
                  draft-hanson-oauth-mfa-assoc-latest

Abstract

   This specification defines mechanisms for dynamically associating
   authenticators with authorization servers.  Once associated, an
   authenticator can be used for strong authorization within OAuth 2.0.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 15, 2018.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.






Hanson                  Expires January 15, 2018                [Page 1]

Internet-DraOAuth 2.0 Multi-Factor Authenticator Association   July 2017


1.  Introduction

   In order for an OAuth 2.0 authorization server to enforce strong
   authorization, it must associate resource owners with one or more
   authenticators capable of responding to a strong authorization
   challenge.  This specification describes how an authenticator can be
   dynamically associated with an authorization server to obtain this
   information.

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].

1.2.  Terminology

   This specification also defines the following terms:

   MFA Token:

      A short-lived token representing an authorization session.

2.  Protocol Endpoints

   The authenticator binding process utilizes one authorization server
   endpoint (HTTP resource):

   o  Associate endpoint - used by the client to associate an
      authenticator to an authorization server.

2.1.  Associate Endpoint

   The associate endpoint is used by the client to obtain parameters
   needed to bind an authenticator to an authorization server.

2.1.1.  Associate Request

   The client makes a request to the associate endpoint by sending the
   following parameters with a content type of "application/json":

   mfa_token
         REQUIRED.  The MFA token received from the authorization
         server.

   authenticator_types




Hanson                  Expires January 15, 2018                [Page 2]

Internet-DraOAuth 2.0 Multi-Factor Authenticator Association   July 2017


         OPTIONAL.  Array of authenticator type strings that the client
         supports.  These authenticator types are defined as follows:

         *  "otp": A device that generates one-time passwords.

         *  "oob": A device that communicates securely with the
            authorization server over a secondary channel.

         Authorization servers MAY allow for other values as defined in
         the authenticator type extension process.

   oob_channels
         OPTIONAL.  Array of out-of-band channel strings that the client
         supports.  These out-of-band channels are defined as follows:

         *  "sms": SMS channel to the user at a registered number.

         *  "tel": Telephone call to the user at a registered number.

         *  "email": E-mail sent to the user at a registered address.

         *  "auth0": Push notification to Guardian app on user's mobile
            device.

         *  "duo": Push notification to Duo Mobile app on user's mobile
            device.

         Authorization servers MAY allow for other values as defined in
         the out-of-band channel extension process.

   client_id
         REQUIRED, if the client is not authenticating with the
         authorization server as described in Section 3.2.1 of
         [RFC6749].

   If the client was issued client credentials (or assigned other
   authentication requirements), the client MUST authenticate with the
   authorization server as described in Section 3.2.1 of [RFC6749].













Hanson                  Expires January 15, 2018                [Page 3]

Internet-DraOAuth 2.0 Multi-Factor Authenticator Association   July 2017


   For example, the client makes the following HTTPS request (line
   breaks are for display purposes only)::

   POST /associate HTTP/1.1
   Host: server.example.com
   Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
   Content-Type: application/json

   {
     "mfa_token": "eyJhbGciOiJ...",
     "authenticator_types": [
       "otp", "oob"
     ]
   }

   The authorization server MUST:

   o  require client authentication for confidential clients or for any
      client that was issued client credentials (or with other
      authentication requirements),

   o  authenticate the client if client authentication is included,

   o  ensure the MFA token was issued to the authenticated confidential
      client, or if the client is public, ensure the MFA token was
      issued to "client_id" in the request,

   o  verify that the MFA token is valid, and

   o  ensure that MFA binding is allowed based on the claims in the MFA
      token.

2.1.2.  Associate Response

   If the associate request is valid and authorized, the authorization
   server selects an authenticator that the client is capable of
   supporting, and responds with an HTTP 200 OK status code and a body
   of type "application/json" with the following content:

   bind_code
         REQUIRED.  Bind code generated by the authorization server,
         used to complete binding of the authenticator to the user's
         account.  The bind code MUST expire shortly after it is issued
         to mitigate the risk of leaks.  A maximum bind code lifetime of
         10 minutes is RECOMMENDED.

   authenticator_type




Hanson                  Expires January 15, 2018                [Page 4]

Internet-DraOAuth 2.0 Multi-Factor Authenticator Association   July 2017


         REQUIRED.  Authenticator type to associate with the user's
         account.

   barcode_uri
         OPTIONAL.  URI to be rendered as a barcode which can be scanned
         by the authenticator to effect provisioning.

   The response MAY include additional parameters that are interpreted
   according to an authenticator type definition.

2.2.  Bind Endpoint

   The bind endpoint is used by the client to bind an authenticator to a
   user's account on the authorization server.

2.2.1.  Bind Request

   The client makes a request to the bind endpoint by sending the
   following parameters with a content type of "application/json":

   mfa_token
         REQUIRED.  The MFA token received from the authorization
         server.

   bind_code
         REQUIRED.  The bind token received from the authorization
         server.

   client_id
         REQUIRED, if the client is not authenticating with the
         authorization server as described in Section 3.2.1 of
         [RFC6749].

   If the client was issued client credentials (or assigned other
   authentication requirements), the client MUST authenticate with the
   authorization server as described in Section 3.2.1 of [RFC6749].















Hanson                  Expires January 15, 2018                [Page 5]

Internet-DraOAuth 2.0 Multi-Factor Authenticator Association   July 2017


   For example, the client makes the following HTTPS request (line
   breaks are for display purposes only)::

   POST /bind HTTP/1.1
   Host: server.example.com
   Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
   Content-Type: application/json

   {
     "mfa_token": "eyJhbGciOiJ...",
     "bind_code": "eyJ0eXAiOiJ..."
   }

   The authorization server MUST:

   o  require client authentication for confidential clients or for any
      client that was issued client credentials (or with other
      authentication requirements),

   o  authenticate the client if client authentication is included,

   o  ensure the MFA token was issued to the authenticated confidential
      client, or if the client is public, ensure the MFA token was
      issued to "client_id" in the request,

   o  verify that the MFA token is valid, and

   o  ensure that MFA binding is allowed based on the claims in the MFA
      token.

2.2.2.  Bind Response

   If the bind request is valid and authorized, the authorization server
   binds the authenticator to the user's account and responds with an
   HTTP 200 OK status code and a body of type "application/json" with
   the following content:

   active
         REQUIRED.  Boolean indicator of whether or not the presented
         token is currently active.

2.2.3.  Bind Error Response

   If the bind request failed client authentication or is invalid, the
   authorization server responds with an HTTP 400 (Bad Request) status
   code (unless specified otherwise) and includes the following
   parameters with the response:




Hanson                  Expires January 15, 2018                [Page 6]

Internet-DraOAuth 2.0 Multi-Factor Authenticator Association   July 2017


   error
         REQUIRED.  A single ASCII error code from the following:

         invalid_request
               The request is missing a required parameter, includes an
               unsupported parameter value (other than authenticator
               type), repeats a parameter, includes multiple
               credentials, utilizes more than one mechanism for
               authenticating the client, or is otherwise malformed.

         invalid_client
               Client authentication failed (e.g. unknown client, no
               client authentication included, or unsupported
               authentication method).  The authorization server MAY
               return an HTTP 401 (Unauthorized) status code to indicate
               which HTTP authentication schemes are supported.  If the
               client attempted to authenticate via the "Authorization"
               request header field, the authorization server MUST
               respond with an HTTP 401 (Unauthorized) status code, and
               include the "WWW-Authenticate" response header field
               matching the authentication scheme used by the client.

         operation_pending
               The bind operation has not yet completed.

         operation_denied
               The user or authorization server denied the bind
               operation.

         slow_down
               The client is polling too quickly and should back off at
               a reasonable rate.

         expired_token
               The provided MFA token or bind code is invalid, expired,
               or revoked.  The client will need to initiate a new
               binding operation.

         unauthorized_client
               The authenticated client is not authorized to bind an
               authenticator.

         unsupported_authenticator_type
               The authenticator types supported by the client are not
               supported by the authorization server or not available to
               the resource owner.

         server_error



Hanson                  Expires January 15, 2018                [Page 7]

Internet-DraOAuth 2.0 Multi-Factor Authenticator Association   July 2017


               The authorization server encountered an unexpected
               condition that prevented it from fulfilling the request.

         bad_gateway
               The authorization server received an invalid response
               from an upstream server it accessed in attempting to
               fulfull the request.  This typically occurs when binding
               an OOB authenticator and the gateway is down, for example
               SMS.

   error_description
         OPTIONAL.  A human-readable ASCII text providing additional
         information, used to assist the client developer in
         understanding the error that occurred.

   error_uri
         OPTIONAL.  A URI identifying a human-readable web page with
         information about the error, used to provide the client
         developer with additional information about the error.

3.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627,
              DOI 10.17487/RFC4627, July 2006,
              <http://www.rfc-editor.org/info/rfc4627>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <http://www.rfc-editor.org/info/rfc6749>.

   [I-D.ietf-oauth-discovery]
              Jones, M., Sakimura, N., and J. Bradley, "OAuth 2.0
              Authorization Server Metadata", draft-ietf-oauth-
              discovery-05 (work in progress), January 2017.

Author's Address

   Jared Hanson
   Auth0 Inc.

   Email: jaredhanson@gmail.com
   URI:   http://www.jaredhanson.net/



Hanson                  Expires January 15, 2018                [Page 8]
