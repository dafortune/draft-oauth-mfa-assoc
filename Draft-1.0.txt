



Network Working Group                                          J. Hanson
Internet-Draft                                                Auth0 Inc.
Expires: January 3, 2018                                    July 2, 2017


              OAuth 2.0 Multi-Factor Authenticator Binding
                     draft-hanson-oauth-mfa-latest

Abstract

   This specification provides a framework for the use of strong
   authorization with OAuth 2.0.  Mechanisms are specified for
   initiating an authorization session.  New authorization grant types
   are defined that allow clients to obtain access tokens within the
   context of a strongly authorized session.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on January 3, 2018.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.




Hanson                   Expires January 3, 2018                [Page 1]

Internet-DraftOAuth 2.0 Multi-Factor Authenticator Binding     July 2017


1.  Introduction

   Strong authorization is a method of access control that grants access
   only after multiple factors of authentication and/or authorization
   have been presented.  Authentication factors typically fall into the
   following categories: knowledge (something you know), possession
   (something you have), and inherence (something you are).  Strong
   authorization factors include transaction confirmation and multi-
   party authorization.

   OAuth 2.0 [RFC6749] is an authorization framework that enables a
   third-party application to obtain limited access to a protected HTTP
   resource.  In OAuth, those third-party applications are called
   clients; they access protected resources by presenting an access
   token to the HTTP resource.  Access tokens are issued to clients by
   an authorization server with the (sometimes implicit) approval of the
   resource owner.  These access tokens are typically obtained by
   exchanging an authorization grant, which represents the authorization
   granted by the resource owner (or by a privileged administrator).

   This specification defines a general framework for the use of strong
   authorization within OAuth 2.0.  It provides a mechanism for
   indicating when strong authorization is required.  It also provides a
   generic mechanism for obtaining a strong authorization challenge.  It
   defines additional extension grant types that allow strong
   authorization grants to be presented in order to obtain access
   tokens.

   This use of strong authorization allows authorization servers to
   implement correspondingly strong authorization policies, including
   step-up authentication and transaction confirmation.

   Authorization servers that implement support for resource owner
   password credentials can augment existing password infrastructure by
   requiring a strong second factor of authentication prior to issuing
   access tokens.

   Transaction confirmation can be used to increase the level of
   assurance prior to issuing tokens for highly privileged operations,
   such as a bank withdrawl.  For example, an end-user (resource owner)
   can grant an application (client) access to her account at a
   brokerage firm (resource server).  The application is authorized to
   obtain real-time stock quotes as well as place orders, and is issued
   both an access token and refresh token.  As a matter of policy, the
   access token can be used to obtain stock quotes and is valid for 24
   hours.  Every 24 hour period, the refresh token is used to obtain a
   new access token, so that access to stock quotes is uninterrupted.
   The access token can also be used to place an order, but is subject



Hanson                   Expires January 3, 2018                [Page 2]

Internet-DraftOAuth 2.0 Multi-Factor Authenticator Binding     July 2017


   to more stringent security requirements.  Using this extension, the
   refresh token can be used to initiate an authorization session which,
   once confirmed by the user, allows issuance of an access token that
   demonstrates strong authentication and has a limited lifetime.

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].

1.2.  Terminology

   This specification also defines the following terms:

   MFA Token:

      A short-lived token representing an authorization session.

1.3.  Protocol Flow






























Hanson                   Expires January 3, 2018                [Page 3]

Internet-DraftOAuth 2.0 Multi-Factor Authenticator Binding     July 2017


     +----------+
     | Resource |
     |  Owner   |
     |          |
     +----------+
        v    v
        |    |
       (A)  (D)
        |    |
        v    v
     +---------+                                      +---------------+
     |         |>-(B)--- Authorization Grant -------->|               |
     |         |                                      |               |
     |         |<-(C)-------- MFA Token -------------<|               |
     |         |                                      | Authorization |
     |         |>-(E)---- Strong Authz Grant -------->|     Server    |
     |         |             & MFA Token              |               |
     |         |                                      |               |
     | Client  |<-(F)------- Access Token -----------<|               |
     |         |                                      +---------------+
     |         |
     |         |                                      +---------------+
     |         |>-(G)------- Access Token ----------->|               |
     |         |                                      |    Resource   |
     |         |<-(H)---- Protected Resource --------<|     Server    |
     |         |                                      |               |
     +---------+                                      +---------------+

                     Figure 1: Abstract Protocol Flow

   The abstract strong authorization flow illustrated in Figure 1
   describes the interaction between the resource owner, resource
   server, client, and authorization server and includes the following
   steps:

   (A)  The client obtains authorization from the resource owner.  The
        authorization can be obtained directly from the resource owner
        (as shown), or preferably indirectly via the authorization
        server as an intermediary.  The resource owner's authorization
        is represented as an authorization grant.

   (B)  The client requests an access token by authenticating with the
        authorization server and presenting the authorization grant.

   (C)  The authorization server authenticates the client and validates
        the authorization grant, and if strong authorization is
        required, returns an error along with an MFA token.




Hanson                   Expires January 3, 2018                [Page 4]

Internet-DraftOAuth 2.0 Multi-Factor Authenticator Binding     July 2017


   (D)  The resource owner provides the client with a strong
        authorization grant.

   (E)  The client requests an access token from the authorization
        server's token endpoint by including the strong authorization
        grant received from the resource owner along with the MFA token
        received during the prior access token request.  When making the
        request, the client authenticates with the authorization server.

   (F)  The authorization server authenticates the client and validates
        the MFA token and strong authorization grant, and if both are
        valid, issues an access token.

   (G)  The client requests the protected resource from the resource
        server and authenticates by presenting the access token.

   (H)  The resource server validates the access token, and if valid,
        serves the request.

2.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627,
              DOI 10.17487/RFC4627, July 2006,
              <http://www.rfc-editor.org/info/rfc4627>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <http://www.rfc-editor.org/info/rfc6749>.

   [I-D.ietf-oauth-discovery]
              Jones, M., Sakimura, N., and J. Bradley, "OAuth 2.0
              Authorization Server Metadata", draft-ietf-oauth-
              discovery-05 (work in progress), January 2017.

Author's Address

   Jared Hanson
   Auth0 Inc.

   Email: jaredhanson@gmail.com
   URI:   http://www.jaredhanson.net/




Hanson                   Expires January 3, 2018                [Page 5]
