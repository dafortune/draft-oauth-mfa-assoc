<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM 'bibxml/reference.RFC.2119.xml'>      
<!ENTITY rfc4287 SYSTEM 'bibxml/reference.RFC.4287.xml'>      
<!ENTITY xmlns SYSTEM 'bibxml/reference.W3C.REC-xml-names-19990114.xml'>      
<!ENTITY rdfsg SYSTEM 'bibxml/reference.W3C.WD-rdf-syntax-grammar-20031010.xml'>      
]>
<rfc docName="draft-hanson-oauth-mfa-latest">
  <front>
    <title>OAuth 2.0 Multi-Factor Authenticator Binding</title>
    <author initials="J." surname="Hanson" fullname="Jared Hanson">
      <organization>Auth0 Inc.</organization>
      <address>       
        <email>jaredhanson@gmail.com</email> 
        <uri>http://www.jaredhanson.net/</uri>       
      </address>
    </author>
    <date/>
    <abstract>
      <t>This specification provides a framework for the use of strong
        authorization with OAuth 2.0.  Mechanisms are specified for initiating
        an authorization session.  New authorization grant types are defined
        that allow clients to obtain access tokens within the context of a
        strongly authorized session.</t>
    </abstract>
  </front>
  <middle>
    
    <section title="Introduction">
      <t>Strong authorization is a method of access control that grants access
        only after multiple factors of authentication and/or authorization have
        been presented.  Authentication factors typically fall into the
        following categories: knowledge (something you know), possession
        (something you have), and inherence (something you are).  Strong
        authorization factors include transaction confirmation and multi-party
        authorization.</t>
      
      <t>OAuth 2.0 <xref target="RFC6749"/> is an authorization framework that
        enables a third-party application to obtain limited access to a
        protected HTTP resource. In OAuth, those third-party applications are
        called clients; they access protected resources by presenting an access
        token to the HTTP resource.  Access tokens are issued to clients by an
        authorization server with the (sometimes implicit) approval of the
        resource owner. These access tokens are typically obtained by exchanging
        an authorization grant, which represents the authorization granted by
        the resource owner (or by a privileged administrator).</t>
        
      <t>This specification defines a general framework for the use of strong
        authorization within OAuth 2.0.  It provides a mechanism for indicating
        when strong authorization is required.  It also provides a generic
        mechanism for obtaining a strong authorization challenge.  It defines
        additional extension grant types that allow strong authorization grants
        to be presented in order to obtain access tokens.</t>
      
      <t>This use of strong authorization allows authorization servers to
        implement correspondingly strong authorization policies, including
        step-up authentication and transaction confirmation.</t>
        
      <t>Authorization servers that implement support for resource owner
        password credentials can augment existing password infrastructure by
        requiring a strong second factor of authentication prior to issuing
        access tokens.</t>
        
      <t>Transaction confirmation can be used to increase the level of assurance
        prior to issuing tokens for highly privileged operations, such as a bank
        withdrawl.  For example, an end-user (resource owner) can grant an
        application (client) access to her account at a brokerage firm (resource
        server).  The application is authorized to obtain real-time stock quotes
        as well as place orders, and is issued both an access token and refresh
        token.  As a matter of policy, the access token can be used to obtain
        stock quotes and is valid for 24 hours.  Every 24 hour period, the
        refresh token is used to obtain a new access token, so that access to
        stock quotes is uninterrupted.  The access token can also be used to
        place an order, but is subject to more stringent security requirements.
        Using this extension, the refresh token can be used to initiate an
        authorization session which, once confirmed by the user, allows issuance
        of an access token that demonstrates strong authentication and has a
        limited lifetime.</t>
        
        <section title="Notational Conventions">
          <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
            "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
            "OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>
        </section>
        
        <section title="Terminology">
          <t>
            This specification also defines the following terms:
            
            <list style="hanging"> 
            <t hangText="MFA Token:"><vspace blankLines="1"/>
              A short-lived token representing an authorization session.</t>
            </list> 
          </t>
        </section>
        
        <section title="Protocol Flow">
          <figure title='Abstract Protocol Flow' anchor='Figure-1'>
            <artwork><![CDATA[
  +----------+
  | Resource |
  |  Owner   |
  |          |
  +----------+
     v    v
     |    |
    (A)  (D)
     |    |
     v    v
  +---------+                                      +---------------+
  |         |>-(B)--- Authorization Grant -------->|               |
  |         |                                      |               |
  |         |<-(C)-------- MFA Token -------------<|               |
  |         |                                      | Authorization |
  |         |>-(E)---- Strong Authz Grant -------->|     Server    |
  |         |             & MFA Token              |               |
  |         |                                      |               |
  | Client  |<-(F)------- Access Token -----------<|               |
  |         |                                      +---------------+
  |         |
  |         |                                      +---------------+
  |         |>-(G)------- Access Token ----------->|               |
  |         |                                      |    Resource   |
  |         |<-(H)---- Protected Resource --------<|     Server    |
  |         |                                      |               |
  +---------+                                      +---------------+
  ]]></artwork>
          </figure>
          <t>
            The abstract strong authorization flow illustrated in <xref target='Figure-1' />
            describes the interaction between the resource owner, resource server, client, and
            authorization server and includes the following steps:
          </t>
          <t>
            <list style='format (%C)'>
              <t>
                The client obtains authorization from the resource owner.  The
                authorization can be obtained directly from the resource owner (as
                shown), or preferably indirectly via the authorization server as an
                intermediary.  The resource owner's authorization is represented as
                an authorization grant.
              </t>
              <t>
                The client requests an access token by authenticating with the
                authorization server and presenting the authorization grant.
              </t>
              <t>
                The authorization server authenticates the client and validates the
                authorization grant, and if strong authorization is required,
                returns an error along with an MFA token.
              </t>
              <t>
                The resource owner provides the client with a strong authorization
                grant.
              </t>
              <t>
                The client requests an access token from the authorization server's
                token endpoint by including the strong authorization grant received
                from the resource owner along with the MFA token received during the
                prior access token request.  When making the request, the client
                authenticates with the authorization server.
              </t>
              <t>
                The authorization server authenticates the client and validates the
                MFA token and strong authorization grant, and if both are valid,
                issues an access token.
              </t>
              <t>
                The client requests the protected resource from the resource server
                and authenticates by presenting the access token.
              </t>
              <t>
                The resource server validates the access token, and if valid, serves
                the request.
              </t>
            </list>
          </t>
        </section>
    </section>
    
  </middle>
  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>
      <?rfc include="reference.RFC.4627"?>
      <?rfc include="reference.RFC.6749"?>
      <?rfc include='http://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-discovery-05.xml'?>
    </references>
  </back>
</rfc>
